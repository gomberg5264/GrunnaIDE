"use strict";


var arr1 = [1,2,3,4,5,6,7,8,9,10];
var arr2 = [9,10,11];
var arr3 = [11,12];

const files = [
  '/src/common/api.js',
  '/src/common/preferences.js',
  '/src/styles/main.css',
  '/src/styles/base/_base.scss',
  '/src/assets/apple-touch-icon-57.png',
];

const exclude = [
  '/src/styles/',
  '/src/assets/apple-touch-icon-57.png',
];

const name = 'John Doe';
//const color = getColorFromName(name); // e.g. #9bc44c

(function () {
  // validateString('superman test something ')
  // console.log(checkIfValueIsInArray(arr1, arr2))
  // console.log(checkIfValueIsInArray(arr1, arr3))
  // console.log(phoneNumber('(123) 456-7890', '#'))
  // excludeList(files, exclude)
  // console.log(getColorFromName(name));
  // console.log(getColorFromName('fdsfdsfs'));
  // console.log(getColorFromName('Daniel Ekedahl'));
  
  console.log(chai)
  let expect = chai.expect;
  expect(fizzBuzz(0, 0)).to.equal('FizzBuzz')
  expect(fizzBuzz(3, 3)).to.equal('Fizz')
  expect(fizzBuzz(5, 5)).to.equal('Buzz')
  expect(fizzBuzz(15, 15)).to.equal('FizzBuzz')
  expect(fizzBuzz(1, 2)).to.equal('12')
  expect(fizzBuzz(100)).to.equal('Buzz')
  expect(fizzBuzz()).to.equal('12Fizz4BuzzFizz78FizzBuzz11Fizz1314FizzBuzz1617Fizz19BuzzFizz2223FizzBuzz26Fizz2829FizzBuzz3132Fizz34BuzzFizz3738FizzBuzz41Fizz4344FizzBuzz4647Fizz49BuzzFizz5253FizzBuzz56Fizz5859FizzBuzz6162Fizz64BuzzFizz6768FizzBuzz71Fizz7374FizzBuzz7677Fizz79BuzzFizz8283FizzBuzz86Fizz8889FizzBuzz9192Fizz94BuzzFizz9798FizzBuzz')
  expect(fizzBuzz()).to.equal(fizzBuzz(1,100))

  expect(function() {fizzBuzz(-1)}).to.throw('Invalid arguments')
  expect(function() {fizzBuzz(-1, 5)}).to.throw('Invalid arguments')
  expect(function() {fizzBuzz(-1, -1)}).to.throw('Invalid arguments')
  expect(function() {fizzBuzz(5, -1)}).to.throw('Invalid arguments')

  // console.log(isIterable(document.querySelectorAll('.sidebar')))
})()

function fizzBuzz(start = 1, stop = 100)
{
    let result = '';
    
    if (stop < start || start < 0 || stop < 0) {
        throw new Error('Invalid arguments');
    }
    
    for (let i = start; i <= stop; i++) {
        if (i % 3 === 0 && i % 5 === 0) {
            result += 'FizzBuzz';
            continue;
        }
        
        if (i % 3 === 0) {
            result += 'Fizz';
            continue;
        }
        
        if (i % 5 === 0) {
            result += 'Buzz';
            continue;
        }
        
        result += i;
    }
    
    return result;
}

function isIterable(isIter) {
  if (isIter == null) {
    return false;
  }
  return typeof isIter[Symbol.iterator] === 'function';
}

function getColorFromName(nameToColor) {
  var hash = 0;
  for (var i = 0; i < nameToColor.length; i++) {
    hash = nameToColor.charCodeAt(i) + ((hash << 5) - hash);
  }
  var colour = '#';
  for (var i = 0; i < 3; i++) {
    var value = (hash >> (i * 8)) & 0xFF;
    colour += ('00' + value.toString(16)).substr(-2);
  }
  return colour;
}

function excludeList(allFiles, excludeFiles) {
  return allFiles.filter(file => !excludeFiles.some(excludeFile => file.startsWith(excludeFile)));
}

function checkIfValueIsInArray(firstArr, secondArr) {
  return firstArr.some(value => secondArr.includes(value));
}

function phoneNumber(inNumber, delimiter) {
  if (!delimiter) {
    delimiter = '-'
  }
  let onlyNumber = inNumber.replace(/\D/g,'')
  if (onlyNumber.length === 10) {
    return onlyNumber.slice(0,3) + delimiter + onlyNumber.slice(3,6) + delimiter + onlyNumber.slice(6)
  } else {
    throw new Error('Wrong phone number');
  }
}

function validateString(str) {
  if (str.toLowerCase().indexOf('superman') < 0) {
      throw new Error('String does not contain superman');
  }    
}